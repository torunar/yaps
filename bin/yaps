#!/usr/bin/env php
<?php

use Torunar\Yaps\Deck\Enum\Rank;
use Torunar\Yaps\Deck\Enum\State;
use Torunar\Yaps\Deck\Enum\Suit;
use Torunar\Yaps\Deck\Enum\SuitColor;
use Torunar\Yaps\Deck\Service\StackService;
use Torunar\Yaps\Deck\ValueObject\Card;
use Torunar\Yaps\Game\Factory\FieldFactory;

const CURSOR_PANEL = 0;
const CURSOR_TABLEU = 1;
const CURSOR_HAND_STOCK_PILE = 0;
const CURSOR_HAND_WASTE_PILE = 1;
const CURSOR_FOUNDATION_CLUBS = 3;
const CURSOR_FOUNDATION_DIAMONDS = 4;
const CURSOR_FOUNDATION_SPADES = 5;
const CURSOR_FOUNDATION_HEARTS = 6;
const TABLEU_HEIGHT = 20;

require_once __DIR__ . '/../vendor/autoload.php';

$field = (new FieldFactory())->getService()->initField();
$stackService = new StackService();

function renderCard(Card $card): string
{
    if (State::Closed === $card->state) {
        return '░░░';
    }

    $buffer = sprintf(
        '%2s',
        match ($card->rank) {
            Rank::Ace => ' A',
            Rank::King => ' K',
            Rank::Queen => ' Q',
            Rank::Jack => ' J',
            default => $card->rank->value
        },
    );
    $buffer .= match ($card->suit) {
        Suit::Clubs => '♣',
        Suit::Diamonds => '♦',
        Suit::Hearts => '♥',
        Suit::Spades => '♠',
    };
    $color = match ($card->suit->getColor()) {
        SuitColor::Red => 160,
        SuitColor::Black => 0,
    };

    return "\e[38;5;{$color};48;5;231m{$buffer}\e[0m";
}

function waitForInput(): string
{
    $input = '';

    $read = [STDIN];
    $write = null;
    $except = null;

    readline_callback_handler_install('', static function () { });

    do {
        $input .= fgetc(STDIN);
    } while (stream_select($read, $write, $except, 0, 1));

    readline_callback_handler_remove();

    return $input;
}

function getLastLine(array $column): int
{
    $lastLine = CURSOR_TABLEU;
    foreach ($column as $line => $card) {
        if ($card) {
            $lastLine = $line;
        }
    }

    return $lastLine;
}

function isInBlackHole(int $line, int $column): bool
{
    return $line === CURSOR_PANEL
        && !in_array(
            $column,
            [
                CURSOR_HAND_STOCK_PILE,
                CURSOR_HAND_WASTE_PILE,
                CURSOR_FOUNDATION_CLUBS,
                CURSOR_FOUNDATION_DIAMONDS,
                CURSOR_FOUNDATION_SPADES,
                CURSOR_FOUNDATION_HEARTS,
            ],
        );
}

$cursor = [
    'line' => CURSOR_TABLEU,
    'column' => 0,
];

while (true) {
    $buffer = array_fill(CURSOR_PANEL, TABLEU_HEIGHT + 1, array_fill(0, count($field->tableu), null));
    $buffer[CURSOR_PANEL][CURSOR_HAND_STOCK_PILE] = $field->hand->stockPile->isEmpty()
        ? null
        : $stackService->getTopCard($field->hand->stockPile)->getClosed();
    $buffer[CURSOR_PANEL][CURSOR_HAND_WASTE_PILE] = $field->hand->wastePile->isEmpty()
        ? null
        : $stackService->getTopCard($field->hand->wastePile)->getOpen();
    $buffer[CURSOR_PANEL][CURSOR_FOUNDATION_CLUBS] = $field->clubsFoundation->isEmpty()
        ? null
        : $stackService->getTopCard($field->clubsFoundation)->getOpen();
    $buffer[CURSOR_PANEL][CURSOR_FOUNDATION_DIAMONDS] = $field->diamondsFoundation->isEmpty()
        ? null
        : $stackService->getTopCard($field->diamondsFoundation)->getOpen();
    $buffer[CURSOR_PANEL][CURSOR_FOUNDATION_SPADES] = $field->spadesFoundation->isEmpty()
        ? null
        : $stackService->getTopCard($field->spadesFoundation)->getOpen();
    $buffer[CURSOR_PANEL][CURSOR_FOUNDATION_HEARTS] = $field->heartsFoundation->isEmpty()
        ? null
        : $stackService->getTopCard($field->heartsFoundation)->getOpen();

    for ($column = 0; $column < count($field->tableu); $column++) {
        for ($line = 0; $line < $field->tableu[$column]->getCardCount(); $line++) {
            $buffer[CURSOR_TABLEU + $line][$column] = $stackService->getNthFromTop($field->tableu[$column], $line);
        }
        if ($field->detachedStack->tableuColumnIndex === $column) {
            for ($line = 0; $line < $field->detachedStack->stack->getCardCount(); $line++) {
                $buffer[
                    CURSOR_TABLEU
                    + $field->tableu[$column]->getCardCount()
                    + 1
                    + $line
                ][$column] = $stackService->getNthFromTop($field->detachedStack->stack, $line);
            }
        }
    }

    ob_start();
    echo "\e[H\e[J";
    foreach ($buffer as $line => $row) {
        foreach ($row as $column => $cell) {
            echo $cursor['line'] === $line && $cursor['column'] === $column
                ? '>'
                : ' ';
            if ($cell) {
                echo renderCard($cell);
                continue;
            }
            echo $line === CURSOR_PANEL && !isInBlackHole($line, $column)
                ? '___'
                : '   ';
        }
        if ($line === CURSOR_PANEL) {
            echo PHP_EOL;
        }
        echo PHP_EOL;
    }
    ob_end_flush();

    $input = waitForInput();

    switch ($input) {
        case chr(27).chr(91).chr(65): // up
            for ($newLine = $cursor['line'] - 1; $newLine >= CURSOR_PANEL; $newLine--) {
                if ($buffer[$newLine][$cursor['column']] || $newLine === CURSOR_PANEL || $newLine === CURSOR_TABLEU) {
                    $cursor['line'] = $newLine;
                    break;
                }
            }
            if (isInBlackHole(...$cursor)) {
                $cursor['column'] = CURSOR_HAND_STOCK_PILE;
            }
            break;
        case chr(27).chr(91).chr(66): // down
            for ($newLine = $cursor['line'] + 1; $newLine < count($buffer); $newLine++) {
                if ($buffer[$newLine][$cursor['column']] || $newLine === CURSOR_PANEL || $newLine === CURSOR_TABLEU) {
                    $cursor['line'] = $newLine;
                    break;
                }
            }
            break;
        case chr(27).chr(91).chr(68): // left
            if ($cursor['column'] === 0) {
                break;
            }

            $newColumn = $cursor['column'] - 1;
            $targetColumn = array_column($buffer, $newColumn);
            $cursor['column'] = $newColumn;
            $cursor['line'] = $targetColumn[$cursor['line']] || $cursor['line'] === CURSOR_PANEL
                ? $cursor['line']
                : getLastLine($targetColumn);
            if (isInBlackHole(...$cursor)) {
                $cursor['column'] = CURSOR_HAND_WASTE_PILE;
            }
            break;
        case chr(27).chr(91).chr(67): // right
            if ($cursor['column'] === count($field->tableu) - 1) {
                break;
            }

            $newColumn = $cursor['column'] + 1;
            $targetColumn = array_column($buffer, $newColumn);
            $cursor['column'] = $newColumn;
            $cursor['line'] = $targetColumn[$cursor['line']] || $cursor['line'] === CURSOR_PANEL
                ? $cursor['line']
                : getLastLine($targetColumn);
            if (isInBlackHole(...$cursor)) {
                $cursor['column'] = CURSOR_FOUNDATION_CLUBS;
            }
            break;
        case chr(27): // escape
        case 'q':
            break 2;
    }
}

exit(0);
